@mixin makeNumberUtilities($settings) {

  @each $utilitySetting in $settings {

    $property: map-get($utilitySetting, property);
    $propertyClass: map-get($utilitySetting, propertyClass);

    @if map-has-key($utilitySetting, ranges) {

      @each $rangeSetting in map-get($utilitySetting, ranges) {

        $start: map-get($rangeSetting, start);
        $end: map-get($rangeSetting, end);
        $steps: 1; // default

        @if map-has-key($rangeSetting, steps) {
          $steps: map-get($rangeSetting, steps);
        }

        @if map-get($rangeSetting, global) != false {

          $value: $start;

          @while $value <= $end {

            $valueClass: str-replace(to-string($value), '.', '');

            #{'.' + $iota-global-utilities-namespace + $propertyClass + $valueClass} {
              #{$property}: #{$value};
            }

            $value: $value + $steps;
          }
        }
      }
    }

    @if map-has-key($utilitySetting, values) {

      @each $valueSetting in map-get($utilitySetting, values) {

        $value: map-get($valueSetting, value);

        $valueClass: '';
        @if map-has-key($valueSetting, valueClass) {
          $valueClass: map-get($valueSetting, valueClass);
        }
        @else {
          $valueClass: $value;
        }

        @if map-get($valueSetting, global) != false {

          $selector: #{'.' + $iota-global-utilities-namespace + $propertyClass + $valueClass};
          @include makeClass($selector, $property, $value);
        }

        @if map-has-key($valueSetting, responsive) {
          @each $breakpointName in map-get($valueSetting, responsive) {
            @include iota-breakpoint($breakpointName) {

              $selector: #{'.' + $iota-global-utilities-namespace + $propertyClass + $valueClass + $iota-global-breakpoint-separator + $breakpointName};

              @include makeClass($selector, $property, $value);
            }
          }
        }
      }
    }
  }
}

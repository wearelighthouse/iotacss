@mixin makeCombinatorUtilities($settings) {

  @each $utilitySetting in $settings {

    $combinator: map-get($utilitySetting, combinator);

    @each $propertySetting in map-get($utilitySetting, properties) {

      $property: map-get($propertySetting, property);

      $propertyClass: '';
      @if map-has-key($propertySetting, propertyClass) {
        $propertyClass: map-get($propertySetting, propertyClass);
      }
      @else {
        $propertyClass: $property;
      }

      @if map-has-key($propertySetting, units) {

        @each $unitSetting in map-get($propertySetting, units) {

          $unit: map-get($unitSetting, unit); // required

          $unitClass: '';
          @if map-has-key($unitSetting, unitClass) {
            $unitClass: map-get($unitSetting, unitClass);
          }
          @else {
            $unitClass: $unit;
          }

          @each $valueSetting in map-get($unitSetting, values) {

            $value: map-get($valueSetting, value);

            $valueClass: '';
            @if map-has-key($valueSetting, valueClass) {
              $valueClass: map-get($valueSetting, valueClass);
            }
            @else {
              $valueClass: $value;
            }

            $value: $value;

            @if (type_of($value) == number) {
              @if (unitless($value) == true) {
                $value: #{$value + $unit};
              }
            }

            $selector: #{'.' + $iota-global-utilities-namespace + $propertyClass + $valueClass + $unitClass} #{$combinator};

            @if map-get($valueSetting, global) != false {

              @include makeClass($selector, $property, $value);

            }

            @if map-has-key($valueSetting, responsive) {
              @each $breakpointName in map-get($valueSetting, responsive) {

                $selector: #{'.' + $iota-global-utilities-namespace + $propertyClass + $valueClass + $unitClass + $iota-global-breakpoint-separator + $breakpointName} #{$combinator};

                @include iota-breakpoint($breakpointName) {

                  @include makeClass($selector, $property, $value);

                }
              }
            }
          }
        }
      }
    }
  }
}

@mixin makeWordUtilities($settings) {

  @each $utilitySetting in $settings {

    $property: map-get($utilitySetting, property);

    $propertyClass: '';
    @if map-has-key($utilitySetting, propertyClass) {
      $propertyClass: map-get($utilitySetting, propertyClass);
    }
    @else {
      $propertyClass: $property;
    }

    @each $valueSetting in map-get($utilitySetting, values) {

      $value: map-get($valueSetting, value);
      $valueClass: $value;

      @if map-has-key($valueSetting, valueClass) {
        $valueClass: map-get($valueSetting, valueClass);
      }

      @if map-get($valueSetting, global) != false {

        $selector: #{'.' + $iota-global-utilities-namespace + $propertyClass + $valueClass};

        @include makeClass($selector, $property, $value);
      }

      @if map-has-key($valueSetting, responsive) {
        @each $breakpointName in map-get($valueSetting, responsive) {
          @include iota-breakpoint($breakpointName) {

            $selector: #{'.' + $iota-global-utilities-namespace + $propertyClass + $valueClass + $iota-global-breakpoint-separator + $breakpointName};

            @include makeClass($selector, $property, $value);
          }
        }
      }

      @if map-has-key($valueSetting, pseudo) {

        @each $pseudo in map-get($valueSetting, pseudo) {

          @if (type_of($pseudo) == list) {

            $pseudoClass: str-replace(to-string($pseudo), '" ', '');

            @each $pseudoName in $pseudo {

              #{'.' + $iota-global-utilities-namespace + $propertyClass + $valueClass + $iota-global-pseudo-separator + $pseudoClass + ':' + $pseudoName} {
                @extend #{'.' + $iota-global-utilities-namespace + $propertyClass + $valueClass} !optional;
              }
            }
          }

          @else {
            #{'.' + $iota-global-utilities-namespace + $propertyClass + $valueClass + $iota-global-pseudo-separator + $pseudo + ':' + $pseudo} {
              @extend #{'.' + $iota-global-utilities-namespace + $propertyClass + $valueClass} !optional;
            }
          }
        }
      }
    }
  }
}

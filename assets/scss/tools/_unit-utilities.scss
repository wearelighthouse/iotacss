@mixin makeUnitUtilities($settings) {

  @each $propertySetting in $unitUtilitiesSettings {

    $property: map-get($propertySetting, property);

    @debug type_of($property);
    $selector: #{'.' + $iota-global-utilities-namespace};

    $propertyClass: '';
    @if map-has-key($propertySetting, propertyClass) {
      $propertyClass: map-get($propertySetting, propertyClass);
      $selector: $selector + $propertyClass;
    }
    @else {
      $selector: $selector + $property;
    }

    @if map-has-key($propertySetting, units) {

      @each $unitSetting in map-get($propertySetting, units) {

        $unit: map-get($unitSetting, unit); // required

        $unitClass: '';
        @if map-has-key($unitSetting, unitClass) {
          $unitClass: map-get($unitSetting, unitClass);
        }
        @else {
          $unitClass: $unit;
        }

        @each $valueSetting in map-get($unitSetting, values) {

          $value: map-get($valueSetting, value);

          $valueClass: '';
          @if map-has-key($valueSetting, valueClass) {
            $valueClass: map-get($valueSetting, valueClass);
          }
          @else {
            $valueClass: $value;
          }

          $value: $value;

          @if (type_of($value) == number) {
            @if (unitless($value) == true) {
              $value: #{$value + $unit};
            }
          }

          @if map-get($valueSetting, global) != false {
            #{$selector + $valueClass + $unitClass} {
              @each $propertySingle in $property {
                #{$propertySingle}: #{$value};
              }
            }
          }

          @if map-has-key($valueSetting, responsive) {
            @each $breakpointName in map-get($valueSetting, responsive) {

              @include iota-breakpoint($breakpointName) {
                #{$selector + $valueClass + $unitClass + $iota-global-breakpoint-separator + $breakpointName} {
                  @each $propertySingle in $property {
                    #{$propertySingle}: #{$value};
                  }
                }
              }
            }
          }
        }
      }
    }

    @if map-has-key($propertySetting, keywords) {

      @each $keywordSetting in map-get($propertySetting, keywords) {

        $keyword: map-get($keywordSetting, keyword); // required

        $keywordClass: '';
        @if map-has-key($keywordSetting, keywordClass) {
          $keywordClass: map-get($keywordSetting, keywordClass);
        }
        @else {
          $keywordClass: $keyword;
        }

        @if map-get($keywordSetting, global) != false {
          #{$selector + $keywordClass} {

            @each $propertySingle in $property {
              #{$propertySingle}: #{$keyword};
            }
          }
        }

        @if map-has-key($keywordSetting, responsive) {
          @each $breakpointName in map-get($keywordSetting, responsive) {

            @include iota-breakpoint($breakpointName) {
              #{$selector + $keywordClass + $iota-global-breakpoint-separator + $breakpointName} {
                @each $propertySingle in $property {
                  #{$propertySingle}: #{$keyword};
                }
              }
            }
          }
        }
      }
    }
  }
}
